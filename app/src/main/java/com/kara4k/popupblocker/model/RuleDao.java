package com.kara4k.popupblocker.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "rules".
*/
public class RuleDao extends AbstractDao<Rule, Long> {

    public static final String TABLENAME = "rules";

    /**
     * Properties of entity Rule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property SearchText = new Property(2, String.class, "searchText", false, "SEARCH_TEXT");
        public final static Property SendBackPress = new Property(3, boolean.class, "sendBackPress", false, "SEND_BACK_PRESS");
        public final static Property PressText = new Property(4, String.class, "pressText", false, "PRESS_TEXT");
    }

    private DaoSession daoSession;


    public RuleDao(DaoConfig config) {
        super(config);
    }
    
    public RuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"rules\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"SEARCH_TEXT\" TEXT," + // 2: searchText
                "\"SEND_BACK_PRESS\" INTEGER NOT NULL ," + // 3: sendBackPress
                "\"PRESS_TEXT\" TEXT);"); // 4: pressText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"rules\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Rule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String searchText = entity.getSearchText();
        if (searchText != null) {
            stmt.bindString(3, searchText);
        }
        stmt.bindLong(4, entity.getSendBackPress() ? 1L: 0L);
 
        String pressText = entity.getPressText();
        if (pressText != null) {
            stmt.bindString(5, pressText);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Rule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String searchText = entity.getSearchText();
        if (searchText != null) {
            stmt.bindString(3, searchText);
        }
        stmt.bindLong(4, entity.getSendBackPress() ? 1L: 0L);
 
        String pressText = entity.getPressText();
        if (pressText != null) {
            stmt.bindString(5, pressText);
        }
    }

    @Override
    protected final void attachEntity(Rule entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Rule readEntity(Cursor cursor, int offset) {
        Rule entity = new Rule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // searchText
            cursor.getShort(offset + 3) != 0, // sendBackPress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pressText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Rule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearchText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendBackPress(cursor.getShort(offset + 3) != 0);
        entity.setPressText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Rule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Rule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Rule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
